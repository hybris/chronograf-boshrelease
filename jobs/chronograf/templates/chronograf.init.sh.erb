#!/bin/bash -e

set -x
export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'


JOB_NAME=<%= spec.name %>
PACKAGE_NAME=chronograf

USER=vcap
GROUP=vcap

RUN_DIR=/var/vcap/sys/run/${PACKAGE_NAME}
LOG_DIR=/var/vcap/sys/log/${PACKAGE_NAME}

mkdir -p ${RUN_DIR} ${LOG_DIR}
chown -R ${USER}:${GROUP} ${RUN_DIR} ${LOG_DIR}

exec 1>> ${LOG_DIR}/${PACKAGE_NAME}.stdout.log
exec 2>> ${LOG_DIR}/${PACKAGE_NAME}.stderr.log

# Daemon name, where is the actual executable
# If the daemon is not there, then exit.
DAEMON=/var/vcap/packages/${PACKAGE_NAME}/usr/bin/chronograf
[ -x $DAEMON ] || exit 5

#####
# Runtime config variables
HOST=<%= p('chronograf.conf.host') %>
PORT=<%= p('chronograf.conf.port') %>
BOLTDB_PATH=<%= p('chronograf.conf.boltdb.path') %>
BOLTDB_DIR=$(dirname ${BOLTDB_PATH})
mkdir -p ${BOLTDB_DIR}
chown -R ${USER}:${GROUP} ${BOLTDB_DIR}
#CANNED_PATH=<%= p('chronograf.conf.canned') %>
CANNED_PATH=/var/vcap/packages/${PACKAGE_NAME}/usr/share/chronograf/canned

# Options to pass to the script on startup
SCRIPT_OPTS="--host ${HOST} --port ${PORT} -b ${BOLTDB_PATH} -c ${CANNED_PATH}"

PIDFILE=$RUN_DIR/${PACKAGE_NAME}.pid

## Configuration file
#CONFIG=/var/vcap/jobs/${PACKAGE_NAME}/config/${PACKAGE_NAME}.conf

if [ -r /lib/lsb/init-functions ]; then
    source /lib/lsb/init-functions
fi

OPEN_FILE_LIMIT=65536

function pidofproc() {
    if [ $# -ne 3 ]; then
        echo "Expected three arguments, e.g. $0 -p pidfile daemon-name"
    fi

    if [ ! -f "$2" ]; then
        return 1
    fi

    local PIDFILE=`cat $2`

    if [ "x$PIDFILE" == "x" ]; then
        return 1
    fi

    if ps --pid "${PIDFILE}" | grep -q $(basename $3); then
        return 0
    fi

    return 1
}

function killproc() {
    if [ $# -ne 3 ]; then
        echo "Expected three arguments, e.g. $0 -p pidfile signal"
    fi

    pid=`cat $2`

    kill -s $3 $pid
}

function log_failure_msg() {
    echo "$@" "[ FAILED ]"
}

function log_success_msg() {
    echo "$@" "[ OK ]"
}

case $1 in
  start)
    # Check if config file exist
    #if [ ! -r ${CONFIG} ]; then
    #    log_failure_msg "config file doesn't exist (or you don't have permission to view)"
    #    exit 4
    #fi

    # Bump the file limits, before launching the daemon. These will carry over to launched processes.
    ulimit -n ${OPEN_FILE_LIMIT}
    if [ $? -ne 0 ]; then
        log_failure_msg "set open file limit to ${OPEN_FILE_LIMIT}"
    fi

    # Checked the PID file exists and check the actual status of process
    if [ -e ${PIDFILE} ]; then
     status_of_proc -p ${PIDFILE} ${DAEMON} "${PACKAGE_NAME} process" && status="0" || status="$?"
     # If the status is SUCCESS then don't need to start again.
     if [ $status = "0" ]; then
       log_success_msg "${PACKAGE_NAME} process was already running"
      exit # Exit
     fi
    fi
    # Start the daemon with the help of start-stop-daemon
    log_success_msg "Starting the process" "${PACKAGE_NAME}"
    # Log the message appropriately
    if `start-stop-daemon --chuid ${GROUP}:${USER} --start -b -m --pidfile ${PIDFILE} --exec ${DAEMON} -- $SCRIPT_OPTS &`; then
     log_success_msg "$PACKAGE_NAME process was started"
    else
     log_failure_msg "$PACKAGE_NAME process did not started"
    fi
  ;;

  stop)
    # Stop the daemon.
    if [ -e $PIDFILE ]; then
     status_of_proc -p $PIDFILE $DAEMON "$PACKAGE_NAME process" && status="0" || status="$?"
     if [ "$status" = 0 ]; then
      start-stop-daemon --stop -R 5 --pidfile $PIDFILE
      /bin/rm -rf $PIDFILE
      log_success_msg "$PACKAGE_NAME process was stopped"
     fi
    else
     log_daemon_msg "$PACKAGE_NAME process is not running"
    fi
    ;;

  reload)
    # Reload the process. Basically sending some signal to a daemon to reload
    # it configurations.
    if [ -e $PIDFILE ]; then
      start-stop-daemon --stop --signal USR1 --quiet --pidfile $PIDFILE --name $PACKAGE_NAME -R 5
      log_success_msg "$PACKAGE_NAME process reloaded successfully"
    else
      log_failure_msg "$PIDFILE does not exists"
      log_failure_msg "$name process is not running"
    fi
  ;;

  restart)
    # Restart the daemon.
    $0 stop && sleep 2 && $0 start
    ;;

  status)
    # Check the status of the process.
    if [ -e $PIDFILE ]; then
     status_of_proc -p $PIDFILE $DAEMON "$PACKAGE_NAME process" && exit 0 || exit $?
    else
     log_daemon_msg "$PACKAGE_NAME Process is not running"
    fi
  ;;

  version)
      $DAEMON --version
      ;;

  *)
      # For invalid arguments, print the usage message.
      echo "Usage: $0 {start|stop|restart|status|version}"
      exit 2
      ;;
esac
